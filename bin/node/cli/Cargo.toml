[package]
name = 'node-cli'
version = '3.0.0-dev'
authors = ['Parity Technologies <admin@parity.io>']
description = 'Generic Substrate node implementation in Rust.'
build = 'build.rs'
edition = '2021'
license = 'GPL-3.0-or-later WITH Classpath-exception-2.0'
default-run = 'substrate'
homepage = 'https://substrate.io'
repository = 'https://github.com/paritytech/substrate/'

[package.metadata.wasm-pack.profile.release]
wasm-opt = false

[package.metadata.docs.rs]
targets = ['x86_64-unknown-linux-gnu']

[badges]
travis-ci = { repository = 'paritytech/substrate' }
maintenance = { status = 'actively-developed' }
is-it-maintained-issue-resolution = { repository = 'paritytech/substrate' }
is-it-maintained-open-issues = { repository = 'paritytech/substrate' }

[[bin]]
name = 'substrate'
path = 'bin/main.rs'
required-features = ['cli']

[lib]
crate-type = ['cdylib', 'rlib']

[dependencies]
clap = { version = '3.1.6', features = ['derive'], optional = true }
codec = { package = 'parity-scale-codec', version = '3.0.0' }
frame-benchmarking-cli = { version = '4.0.0-dev', optional = true, path = '../../../utils/frame/benchmarking-cli' }
frame-system = { version = '4.0.0-dev', path = '../../../frame/system' }
frame-system-rpc-runtime-api = { version = '4.0.0-dev', path = '../../../frame/system/rpc/runtime-api' }
futures = '0.3.21'
grandpa = { version = '0.10.0-dev', package = 'sc-finality-grandpa', path = '../../../client/finality-grandpa' }
grandpa-primitives = { version = '4.0.0-dev', package = 'sp-finality-grandpa', path = '../../../primitives/finality-grandpa' }
hex-literal = '0.3.4'
log = '0.4.16'
node-executor = { version = '3.0.0-dev', path = '../executor' }
node-inspect = { version = '0.9.0-dev', optional = true, path = '../inspect' }
node-primitives = { version = '2.0.0', path = '../primitives' }
node-rpc = { version = '3.0.0-dev', path = '../rpc' }
node-runtime = { version = '3.0.0-dev', path = '../runtime' }
pallet-asset-tx-payment = { version = '4.0.0-dev', path = '../../../frame/transaction-payment/asset-tx-payment/' }
pallet-im-online = { version = '4.0.0-dev', default-features = false, path = '../../../frame/im-online' }
pallet-transaction-payment = { version = '4.0.0-dev', path = '../../../frame/transaction-payment' }
rand = '0.8'
sc-authority-discovery = { version = '0.10.0-dev', path = '../../../client/authority-discovery' }
sc-basic-authorship = { version = '0.10.0-dev', path = '../../../client/basic-authorship' }
sc-chain-spec = { version = '4.0.0-dev', path = '../../../client/chain-spec' }
sc-cli = { version = '0.10.0-dev', optional = true, path = '../../../client/cli' }
sc-client-api = { version = '4.0.0-dev', path = '../../../client/api' }
sc-consensus = { version = '0.10.0-dev', path = '../../../client/consensus/common' }
sc-consensus-babe = { version = '0.10.0-dev', path = '../../../client/consensus/babe' }
sc-consensus-slots = { version = '0.10.0-dev', path = '../../../client/consensus/slots' }
sc-consensus-uncles = { version = '0.10.0-dev', path = '../../../client/consensus/uncles' }
sc-executor = { version = '0.10.0-dev', path = '../../../client/executor' }
sc-network = { version = '0.10.0-dev', path = '../../../client/network' }
sc-rpc = { version = '4.0.0-dev', path = '../../../client/rpc' }
sc-service = { version = '0.10.0-dev', default-features = false, path = '../../../client/service' }
sc-sync-state-rpc = { version = '0.10.0-dev', path = '../../../client/sync-state-rpc' }
sc-sysinfo = { version = '6.0.0-dev', path = '../../../client/sysinfo' }
sc-telemetry = { version = '4.0.0-dev', path = '../../../client/telemetry' }
sc-transaction-pool = { version = '4.0.0-dev', path = '../../../client/transaction-pool' }
sc-transaction-pool-api = { version = '4.0.0-dev', path = '../../../client/transaction-pool/api' }
serde = { version = '1.0.136', features = ['derive'] }
serde_json = '1.0.79'
sp-api = { version = '4.0.0-dev', path = '../../../primitives/api' }
sp-authority-discovery = { version = '4.0.0-dev', path = '../../../primitives/authority-discovery' }
sp-authorship = { version = '4.0.0-dev', path = '../../../primitives/authorship' }
sp-consensus = { version = '0.10.0-dev', path = '../../../primitives/consensus/common' }
sp-consensus-babe = { version = '0.10.0-dev', path = '../../../primitives/consensus/babe' }
sp-core = { version = '6.0.0', path = '../../../primitives/core' }
sp-inherents = { version = '4.0.0-dev', path = '../../../primitives/inherents' }
sp-keyring = { version = '6.0.0', path = '../../../primitives/keyring' }
sp-keystore = { version = '0.12.0', path = '../../../primitives/keystore' }
sp-runtime = { version = '6.0.0', path = '../../../primitives/runtime' }
sp-timestamp = { version = '4.0.0-dev', path = '../../../primitives/timestamp' }
sp-transaction-pool = { version = '4.0.0-dev', path = '../../../primitives/transaction-pool' }
sp-transaction-storage-proof = { version = '4.0.0-dev', path = '../../../primitives/transaction-storage-proof' }
try-runtime-cli = { version = '0.10.0-dev', optional = true, path = '../../../utils/frame/try-runtime/cli' }

[target.'cfg(any(target_arch="x86_64", target_arch="aarch64"))'.dependencies]
node-executor = { version = '3.0.0-dev', path = '../executor', features = ['wasmtime'] }
sc-cli = { version = '0.10.0-dev', optional = true, path = '../../../client/cli', features = ['wasmtime'] }
sc-service = { version = '0.10.0-dev', default-features = false, path = '../../../client/service', features = [
	'wasmtime',
] }
sp-trie = { version = '6.0.0', default-features = false, path = '../../../primitives/trie', features = [
	'memory-tracker',
] }

[dev-dependencies]
assert_cmd = '2.0.2'
async-std = { version = '1.11.0', features = ['attributes'] }
criterion = { version = '0.3.5', features = ['async_tokio'] }
futures = '0.3.21'
nix = '0.23'
pallet-timestamp = { version = '4.0.0-dev', path = '../../../frame/timestamp' }
platforms = '2.0'
regex = '1.5.5'
remote-externalities = { path = '../../../utils/frame/remote-externalities' }
sc-block-builder = { version = '0.10.0-dev', path = '../../../client/block-builder' }
sc-client-db = { version = '0.10.0-dev', path = '../../../client/db' }
sc-consensus = { version = '0.10.0-dev', path = '../../../client/consensus/common' }
sc-consensus-babe = { version = '0.10.0-dev', path = '../../../client/consensus/babe' }
sc-consensus-epochs = { version = '0.10.0-dev', path = '../../../client/consensus/epochs' }
sc-keystore = { version = '4.0.0-dev', path = '../../../client/keystore' }
sc-service-test = { version = '2.0.0', path = '../../../client/service/test' }
serde_json = '1.0'
soketto = '0.7.1'
sp-blockchain = { version = '4.0.0-dev', path = '../../../primitives/blockchain' }
sp-tracing = { version = '5.0.0', path = '../../../primitives/tracing' }
tempfile = '3.1.0'
tokio = { version = '1.17.0', features = ['macros', 'time', 'parking_lot'] }
wait-timeout = '0.2'

[build-dependencies]
clap = { version = '3.1.6', optional = true }
clap_complete = { version = '3.0', optional = true }
node-inspect = { version = '0.9.0-dev', optional = true, path = '../inspect' }
frame-benchmarking-cli = { version = '4.0.0-dev', optional = true, path = '../../../utils/frame/benchmarking-cli' }
substrate-build-script-utils = { version = '3.0.0', optional = true, path = '../../../utils/build-script-utils' }
substrate-frame-cli = { version = '4.0.0-dev', optional = true, path = '../../../utils/frame/frame-utilities-cli' }
try-runtime-cli = { version = '0.10.0-dev', optional = true, path = '../../../utils/frame/try-runtime/cli' }
sc-cli = { version = '0.10.0-dev', path = '../../../client/cli', optional = true }
pallet-balances = { version = '4.0.0-dev', path = '../../../frame/balances' }

[features]
default = ['cli']
cli = [
	'clap',
	'clap_complete',
	'frame-benchmarking-cli',
	'node-executor/wasmi-errno',
	'node-inspect',
	'sc-cli',
	'sc-service/db',
	'substrate-build-script-utils',
	'substrate-frame-cli',
	'try-runtime-cli',
]
runtime-benchmarks = ['frame-benchmarking-cli', 'node-runtime/runtime-benchmarks']
try-runtime = ['node-runtime/try-runtime', 'try-runtime-cli']

[[bench]]
name = 'transaction_pool'
harness = false

[[bench]]
name = 'block_production'
harness = false
